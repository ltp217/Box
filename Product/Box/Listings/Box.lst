C51 COMPILER V9.54   BOX                                                                   09/18/2016 22:39:25 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE BOX
OBJECT MODULE PLACED IN .\Objects\Box.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Code\Box.c OPTIMIZE(8,SPEED) BROWSE INCDIR(..\..\Include) DEFINE(FOSC_22
                    -1184) DEBUG OBJECTEXTEND PRINT(.\Listings\Box.lst) TABS(2) OBJECT(.\Objects\Box.obj)

line level    source

   1          /******************************************************************************/
   2          /*                                                                            */
   3          /*                   BOX.C:  The Mini Box Main Program                        */
   4          /*                                                                            */
   5          /******************************************************************************/
   6          
   7          #include <stdio.h>
   8          #include <rtx51tny.h>                 /* RTX-51 tiny functions & defines */
   9          #include "Common.h"
  10          #include "Semaphore.h"
  11          
  12          #include "Box.h"                    /* project specific header file */
  13          
  14          bit BIT_TMP;
  15          
  16          /******************************************************************************/
  17          /*       System Initialize: GPIO¡¢UART0¡¢FW Version                           */
  18          /******************************************************************************/
  19          void sys_init(void)
  20          {
  21   1          /* Note
  22   1             MCU power on system clock is HIRC (22.1184MHz), so Fsys = 22.1184MHz
  23   1          */
  24   1          Set_All_GPIO_Quasi_Mode();                              /* GPIO init */
  25   1         
  26   1          InitialUART0_Timer1_Type2(BAUD_RATE_9600); /* Baud Rate */
  27   1      
  28   1          Show_FW_Version_Number_To_PC();                         /* Fireware Version */   
  29   1      }
  30          
  31          /******************************************************************************/
  32          /*       Task 0 'init': Initialize                                            */
  33          /******************************************************************************/
  34          void startup_task (void) _task_ STARTUP_TASK 
  35          {    
  36   1          sys_init();
  37   1          
  38   1          init_semaphore(0, 1, 1);            /* semphore init */
  39   1          
  40   1          os_create_task(PHASE1);            /* start task PHASE1                    */
  41   1          os_create_task(PHASE2);            /* start task PHASE2                    */
  42   1          os_delete_task(STARTUP_TASK);      /* stop init task (no longer needed)    */
  43   1      }
  44          
  45          /******************************************************************************/
  46          /*    Task 1 'phase1':                                                        */
  47          /******************************************************************************/
  48          void phase1 (void) _task_  PHASE1 
  49          {
  50   1          while (1)  
  51   1          {                               /* endless loop */
  52   2              pend_semaphore(0);
  53   2              printf("TASK # %d\n", (int)os_running_task_id ());  
  54   2              release_semaphore(0);
C51 COMPILER V9.54   BOX                                                                   09/18/2016 22:39:25 PAGE 2   

  55   2          }
  56   1      }
  57          
  58          /******************************************************************************/
  59          /*    Task 2 'phase2':                                                        */
  60          /******************************************************************************/
  61          void phase2 () _task_ PHASE2 
  62          {
  63   1          while (1)
  64   1          {                               /* endless loop */   
  65   2              pend_semaphore(0);
  66   2              printf ("TASK # %d\n", (int)os_running_task_id ());
  67   2              release_semaphore(0);
  68   2          }
  69   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    102    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
